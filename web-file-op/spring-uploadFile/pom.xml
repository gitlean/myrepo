<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.isoft</groupId>
  <artifactId>spring-uploadFile</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  
  <properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<spring.version>5.0.0.RELEASE</spring.version>
		<org.aspectj.version>1.9.1</org.aspectj.version>
		<hibernate.version>5.2.11.Final</hibernate.version>
		<fastjson.version>1.2.42</fastjson.version>
		<slf4j.version>1.7.5</slf4j.version>
		<logback.version>1.2.3</logback.version>
		<cxf.version>3.2.1</cxf.version>
		<mybatis.version>3.4.6</mybatis.version>
		<mybatis.spring.version>1.3.2</mybatis.spring.version>
		<spring.security.version>3.1.0.RELEASE</spring.security.version><!-- 此版本经过测试 -->
		<apache.shiro.version>1.4.0</apache.shiro.version>	
		<poi.version>3.9</poi.version>
	</properties>

	<dependencies>

	
		<!-- spring BEGIN -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		
		<!-- 提供支持集成常见的第三方库，特别是缓存和调度。  例如Encache 、 quartz -->
		<!-- 
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		-->
		
		<!-- java消息服务与Spring-messaging对应 , 结合ActiveMQ 、RabbitMQ等消息组件  -->
		<!--
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jms</artifactId> //包含Spring-messaging
			<version>${spring.version}</version>
		</dependency>
		-->
		
		<!-- Spring 框架对 WebSocket 提供的支持 -->
		<!-- 
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>${spring.version}</version>
		</dependency>
		 -->
		
		<!-- spring END -->


		<!-- spring security START -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring.security.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-acl</artifactId>
			<version>${spring.security.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring.security.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<!-- spring security END -->



		<!-- apache shiro START-->
		<!-- 
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-all</artifactId>
			<version>${apache.shiro.version}</version>
			<type>pom</type>
		</dependency>
		 -->
		<!-- apache shiro END-->
		
		
		<!-- 切面编程依赖包 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${org.aspectj.version}</version> 
		</dependency>
		
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj.version}</version> 
		</dependency>
		<!-- END -->

		<!-- hibernate -->
		<!-- 下面pom依赖的会导入 -->
		<!-- 
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		 -->

		<!-- MyBatis  START -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>

		<!-- mybatis 与spring集成依赖的jar -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis.spring.version}</version>
		</dependency>
		<!--MyBatis  END -->


		<!-- poi-->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml-schemas</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-scratchpad</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-examples</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-excelant</artifactId>
			<version>${poi.version}</version>
		</dependency>








		<!-- web jar -->
		
		<!--即  ${tomcat_home}/lib 下的 servlet-api-->
		<!-- javax.servlet:servlet-api 升级 javax.servlet:javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
		</dependency>
 		
 		<!--即  ${tomcat_home}/lib 下的 jsp-api-->
 		<!-- javax.servlet:jsp-api 升级   javax.servlet.jsp:jsp-api 升级   javax.servlet.jsp:javax.servlet.jsp-api-->
		<!-- 根据需要是否导入  -->
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.3.3</version>
			<scope>provided</scope>
		</dependency>
		

		<!-- jstl-api 依赖 servlet-api和jsp-api,  而${tomcat_home}/lib目录下有servlet-api和jsp-api  -->
		<!-- 如果需要用到  jstl ，为防止版本冲突，exclusion  servlet-api和jsp-api  -->
		<!-- tomcat7是兼容j2ee 3.0规范的，所以我们将jstl 依赖的东西给去除掉，防止和tomcat自身的servlet jar包冲突 -->
		<dependency>
			<groupId>javax.servlet.jsp.jstl</groupId>
			<artifactId>jstl-api</artifactId>
			<version>1.2</version>
			
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.servlet.jsp</groupId>
					<artifactId>jsp-api</artifactId>
				</exclusion>
			</exclusions>
			
		</dependency>
		
		<!-- 再导入jstl的实现      http://www.javacoder.cn/?p=195-->
		<!-- 基本上有两个版本，一个是glassfish 的jstl-impl, 另一个是apache的taglibs-standard-impl -->
		<!-- 顺便说一下jstl-impl-1.2.jar 和taglibs-standard-impl-1.2.1.jar 的区别，这两个包的内容很相似，后者应该是前者的一个再打包，因为Apache的taglibs工程从2009年以后一直处于停止状态。 -->
		<!-- 如果缺失jstl-imp  报错：org.apache.jasper.JasperException: The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml or the jar files deployed with this application -->
	
		<dependency>
	      <groupId>org.apache.taglibs</groupId>
	      <artifactId>taglibs-standard-impl</artifactId>
	      <version>1.2.1</version>
	    </dependency>
		
		<!-- 如果用 glassfish 的jstl-impl -->
		<!-- 
		<dependency> 
		  <groupId>org.glassfish.web</groupId>  
		  <artifactId>jstl-impl</artifactId>  
		  <version>1.2</version>  
		  <exclusions> 
		    <exclusion> 
		      <groupId>javax.servlet</groupId>  
		      <artifactId>servlet-api</artifactId> 
		    </exclusion>  
		    <exclusion> 
		      <groupId>javax.servlet.jsp</groupId>  
		      <artifactId>jsp-api</artifactId> 
		    </exclusion>  
		    <exclusion> 
		      <groupId>javax.servlet.jsp.jstl</groupId>  
		      <artifactId>jstl-api</artifactId> 
		    </exclusion> 
		  </exclusions> 
		</dependency>
 		-->



		
		<!--  在以前jstl版本还需taglib,  但在jstl-1.2.jar 不需要了；JSTL使用需加入两个jar包:jstl与taglibs-->
		<!-- 即   jstl和taglibs     =      jstl-api + jstl-imp   -->
		<!--
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		-->

		<!-- web jar  END -->









		<!-- Apache Commons START -->
	
		<!-- StringUtils -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.3.2</version>
		</dependency>
		<!-- commons-lang:commons-lang:2.6 -->
		
		
		
		<!-- 为Java标准的Collections API提供了相当好的补充 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.0</version>
		</dependency>
		<!-- commons-collections:commons-collections:3.2.2 -->
		
		
		<!--commons-math3是java的一种科学计算类库-->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>3.3</version>
		</dependency>
		

		<!--  digester组件简化了xml文件处理操作，能将xml文件按照事先确定的规则（采用编码形式或xml配置文件形式），映射成java对象。-->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-digester3</artifactId>
			<!-- 依赖commons-beanutils -->
			<!-- 依赖commons-logging   -->
			<version>3.2</version>
		</dependency>
		
		<!-- email -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-email</artifactId>
			<version>1.5</version>
		</dependency>

		<!-- DBCP数据库连接池 -->
		<!-- 
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			//依赖commons-pool:commons-pool
			<version>1.4</version>
		</dependency>
		
		<dependency>
			<groupId>commons-pool</groupId>
			<artifactId>commons-pool</artifactId>
			<version>1.6</version>
		</dependency>
 		-->


		
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-dbcp2</artifactId>  
		    <!-- 依赖commons-pool2  -->
		    <version>2.1.1</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.2</version>
		</dependency>
		


		<!-- IOUtils -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>


		<!-- BinaryDecoder、StringDecoder等操作 -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.8</version>
		</dependency>

		<!-- 文件上传 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		
		
		<!-- 使用commons-net包进行FTP开发等 -->
		<dependency>
			<groupId>commons-net</groupId>
			<artifactId>commons-net</artifactId>
			<version>3.3</version>
		</dependency>
		
		<!-- 对jdbc进行简单封装 -->
		<dependency>
			<groupId>commons-dbutils</groupId>
			<artifactId>commons-dbutils</artifactId>
			<version>1.5</version>
		</dependency>


		<!--  commons chain 提供了对CoR模式的基础支持。CoR模式,是Chain of Responsebility的缩写。 -->
		<dependency>
			<groupId>commons-chain</groupId>
			<artifactId>commons-chain</artifactId>
			<version>1.2</version>
		</dependency>
		 
	 	<!-- commons-beanutils是一款优秀的工具类库。不但提供了一种能够动态扩展属性的JavaBean，同一时候封装了Java的反射机制。使用者能够更加easy的对反射进行操作，而不须要了解那么多和反射相关的知识。 -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<!-- 依赖commons-logging:commons-logging-->
			<version>1.8.3</version>
		</dependency>


		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.3</version>
		</dependency>
		<!-- Apache Commons END -->



		<!-- 日志相关 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-access</artifactId>
			<version>${logback.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
			<scope>compile</scope>
		</dependency>


		<dependency>
			<groupId>org.logback-extensions</groupId>
			<artifactId>logback-ext-spring</artifactId>
			<version>0.1.4</version>
		</dependency>
		<!-- 日志相关 END-->

		<!-- JSON -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>

		<!-- mysql -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.31</version>
		</dependency>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<!-- 得到的jar/war名称 -->
		<finalName>spring-uploadFile</finalName>

		<plugins>
		    <!-- maven-assembly-plugin 是将所有依赖jar打包成一个jar  -->
			<!--  
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<mainClass>com.secs.cxf.BatchSaveAuth2</mainClass>
						</manifest>
					</archive>
					
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			-->
		
		
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<!-- main入口 -->
							<mainClass>com.secs.cxf.BatchSaveAuth2</mainClass>

						</manifest>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.10</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
		</plugins>

	</build>
	
</project>