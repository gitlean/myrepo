https://www.cnblogs.com/coshaho/p/5127135.html
ThreadLocal用法详解和原理
ThreadLocal用于保存某个线程共享变量：对于同一个static ThreadLocal，不同线程只能从中get，set，remove自己的变量，而不会影响其他线程的变量。

		http://www.threadworld.cn/archives/66.html
		一针见血理解ThreadLocal类

		ThreadLocal 是线程作用域
		
		

https://blog.csdn.net/woshiluoye9/article/details/72544764
多线程中的ThreadLocal 详解



https://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486542&idx=1&sn=bdec7df8f84e4b751d38cfd1236b9991&chksm=ebd63362dca1ba749a5da41099553cb39d8d52af1be2011908580168b93f602b232eac527caf&mpshare=1&scene=23&srcid=1011w5A3QLTFYuXqBsjf9Vye#rd
ThreadLocal 源码解读


https://www.cnblogs.com/dreamroute/p/5034726.html
事实上，从本质来讲，就是每个线程都维护了一个map，而这个map的key就是threadLocal，而值就是我们set的那个值，每次线程在get的时候，都从自己的变量中取值，既然从自己的变量中取值，那肯定就不存在线程安全问题，总体来讲，ThreadLocal这个变量的状态根本没有发生变化，他仅仅是充当一个key的角色，另外提供给每一个线程一个初始值。如果允许的话，我们自己就能实现一个这样的功能，只不过恰好JDK就已经帮我们做了这个事情。



